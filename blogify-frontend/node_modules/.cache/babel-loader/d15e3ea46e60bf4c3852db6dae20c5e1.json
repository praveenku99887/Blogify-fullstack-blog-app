{"ast":null,"code":"const BLOG_DOMAIN = \"http://localhost:3000/api\";\nexport const getAllPosts = async () => {\n  const response = await fetch(`${BLOG_DOMAIN}/posts`);\n  return response.ok ? await response.json() : [];\n};\nexport const getPostById = async id => {\n  const response = await fetch(`${BLOG_DOMAIN}/posts/${id}`);\n\n  if (!response.ok) {\n    throw new Error(\"Post with id: \" + id + \" not found\");\n  }\n\n  return await response.json();\n};\nexport const submitNewPost = async (newPost, token) => {\n  const response = await fetch(`${BLOG_DOMAIN}/posts`, {\n    method: \"POST\",\n    body: JSON.stringify(newPost),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  });\n\n  if (!response.ok) {\n    throw new Error(response.status);\n  }\n\n  return response.json();\n};\nexport const updatePost = async (updatedPost, token) => {\n  const response = await fetch(`${BLOG_DOMAIN}/posts`, {\n    method: \"PUT\",\n    body: JSON.stringify(updatedPost),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  });\n\n  if (!response.ok) {\n    throw new Error(response.status);\n  }\n\n  return response.json();\n};\nexport const deletePost = async (postId, token) => {\n  const response = await fetch(`${BLOG_DOMAIN}/posts/${postId}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n\n  if (!response.ok) {\n    throw new Error(response.status);\n  }\n\n  return response.ok;\n};\nexport const submitNewComment = async (newComment, token) => {\n  const response = await fetch(`${BLOG_DOMAIN}/comments`, {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  });\n\n  if (!response.ok) {\n    throw new Error(response.status);\n  }\n\n  return response.json();\n};\nexport const updateComment = async (updatedComment, token) => {\n  const response = await fetch(`${BLOG_DOMAIN}/comments`, {\n    method: \"PUT\",\n    body: JSON.stringify(updatedComment),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  });\n\n  if (!response.ok) {\n    throw new Error(`Error - ${response.status} ${response.statusText}`);\n  }\n\n  return response.json();\n};\nexport const deleteComment = async (commentId, token) => {\n  const response = await fetch(`${BLOG_DOMAIN}/comments/${commentId}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n\n  if (!response.ok) {\n    throw new Error(`Error - ${response.status} ${response.statusText}`);\n  }\n\n  return response.ok;\n};\nexport const register = async registerRequest => {\n  const response = await fetch(`${BLOG_DOMAIN}/auth/signup`, {\n    method: \"POST\",\n    body: JSON.stringify(registerRequest),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.userName);\n  }\n\n  return data;\n};\nexport const login = async loginRequest => {\n  const response = await fetch(`${BLOG_DOMAIN}/auth/login`, {\n    method: \"POST\",\n    body: JSON.stringify(loginRequest),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.error);\n  }\n\n  return data;\n};","map":{"version":3,"names":["BLOG_DOMAIN","getAllPosts","response","fetch","ok","json","getPostById","id","Error","submitNewPost","newPost","token","method","body","JSON","stringify","headers","Authorization","status","updatePost","updatedPost","deletePost","postId","submitNewComment","newComment","updateComment","updatedComment","statusText","deleteComment","commentId","register","registerRequest","data","userName","login","loginRequest","error"],"sources":["C:/Users/PRAVEEN SINGH RAJPUT/react-spring-boot-blog/demo-blog-frontend/src/lib/api.js"],"sourcesContent":["const BLOG_DOMAIN = \"http://localhost:3000/api\";\r\n\r\nexport const getAllPosts = async () => {\r\n  const response = await fetch(`${BLOG_DOMAIN}/posts`);\r\n  return response.ok ? await response.json() : [];\r\n};\r\n\r\nexport const getPostById = async (id) => {\r\n  const response = await fetch(`${BLOG_DOMAIN}/posts/${id}`);\r\n  if (!response.ok) {\r\n    throw new Error(\"Post with id: \" + id + \" not found\");\r\n  }\r\n  return await response.json();\r\n};\r\n\r\nexport const submitNewPost = async (newPost, token) => {\r\n  const response = await fetch(`${BLOG_DOMAIN}/posts`, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(newPost),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(response.status);\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const updatePost = async (updatedPost, token) => {\r\n  const response = await fetch(`${BLOG_DOMAIN}/posts`, {\r\n    method: \"PUT\",\r\n    body: JSON.stringify(updatedPost),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(response.status);\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const deletePost = async (postId, token) => {\r\n  const response = await fetch(`${BLOG_DOMAIN}/posts/${postId}`, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(response.status);\r\n  }\r\n  return response.ok;\r\n};\r\n\r\nexport const submitNewComment = async (newComment, token) => {\r\n  const response = await fetch(`${BLOG_DOMAIN}/comments`, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(newComment),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(response.status);\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const updateComment = async (updatedComment, token) => {\r\n  const response = await fetch(`${BLOG_DOMAIN}/comments`, {\r\n    method: \"PUT\",\r\n    body: JSON.stringify(updatedComment),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(`Error - ${response.status} ${response.statusText}`);\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport const deleteComment = async (commentId, token) => {\r\n  const response = await fetch(`${BLOG_DOMAIN}/comments/${commentId}`, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(`Error - ${response.status} ${response.statusText}`);\r\n  }\r\n  return response.ok;\r\n};\r\n\r\nexport const register = async (registerRequest) => {\r\n  const response = await fetch(`${BLOG_DOMAIN}/auth/signup`, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(registerRequest),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  const data = await response.json();\r\n  if (!response.ok) {\r\n    throw new Error(data.userName);\r\n  }\r\n  return data;\r\n};\r\n\r\nexport const login = async (loginRequest) => {\r\n  const response = await fetch(`${BLOG_DOMAIN}/auth/login`, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(loginRequest),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  const data = await response.json();\r\n  if (!response.ok) {\r\n    throw new Error(data.error);\r\n  }\r\n  return data;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}